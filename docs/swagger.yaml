basePath: /
definitions:
  forms.LoginForm:
    properties:
      password:
        example: password
        type: string
      username:
        example: account_mock
        type: string
    required:
    - password
    - username
    type: object
  forms.RegistrationForm:
    properties:
      email:
        example: account@mock.com
        type: string
      name:
        example: account name
        type: string
      password:
        example: password
        type: string
      username:
        example: account_mock
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  prisma.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  utils.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad Request
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: msalanvarov@gmail.com
    name: API Support
    url: https://msanvarov.github.io/personal-portfolio/
  description: Simple API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: API
  version: "1.0"
paths:
  /api/v1/login:
    post:
      parameters:
      - description: Login Payload
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/forms.LoginForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/prisma.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Login
      tags:
      - auth
  /api/v1/logout:
    post:
      produces:
      - text/plain
      responses:
        "200":
          description: Logout Request Completed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Logout
      tags:
      - auth
  /api/v1/register:
    post:
      parameters:
      - description: Registration Payload
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/forms.RegistrationForm'
      produces:
      - application/json
      responses:
        "200":
          description: Registration Request Completed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Register
      tags:
      - auth
  /api/v1/session:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Fetch Session Data Request Completed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Fetch session data
      tags:
      - auth
  /ping:
    get:
      produces:
      - text/plain
      responses:
        "200":
          description: Status Request Completed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Checks status of the server
      tags:
      - health
swagger: "2.0"
